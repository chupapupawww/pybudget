# pybudget/cli.py

import argparse

def add_income(args):
    print(f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {args.amount} —Ä—É–±, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {args.category}")

def add_expense(args):
    print(f"üí∏ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {args.amount} —Ä—É–±, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {args.category}")

def show_stats(args):
    print(f"üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {args.period}")

def set_limit(args):
    print(f"üîí –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {args.amount} —Ä—É–± –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {args.category}")

def main():
    parser = argparse.ArgumentParser(description="üßæ pybudget CLI")
    subparsers = parser.add_subparsers(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
    parser_income = subparsers.add_parser("add-income", help="–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
    parser_income.add_argument("--amount", type=float, required=True)
    parser_income.add_argument("--category", required=True)
    parser_income.set_defaults(func=add_income)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
    parser_expense = subparsers.add_parser("add-expense", help="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
    parser_expense.add_argument("--amount", type=float, required=True)
    parser_expense.add_argument("--category", required=True)
    parser_expense.set_defaults(func=add_expense)

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    parser_stats = subparsers.add_parser("show-stats", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    parser_stats.add_argument("--period", choices=["day", "week", "month"], default="month")
    parser_stats.set_defaults(func=show_stats)

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç
    parser_limit = subparsers.add_parser("set-limit", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç")
    parser_limit.add_argument("--category", required=True)
    parser_limit.add_argument("--amount", type=float, required=True)
    parser_limit.set_defaults(func=set_limit)

    args = parser.parse_args()
    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
